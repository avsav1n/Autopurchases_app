# Generated by Django 5.1.6 on 2025-03-29 09:43

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. 50 characters or fewer.', max_length=50, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Products category',
                'verbose_name_plural': 'Products categories',
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. 50 characters or fewer.', max_length=50, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Products parameter',
                'verbose_name_plural': 'Products parameters',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. 50 characters or fewer.', max_length=50, unique=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('slug', models.SlugField(blank=True, help_text='This field is automatically populated based on the name. It is used to create human-readable URLs.', unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Shop',
                'verbose_name_plural': 'Shops',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Required. 150 characters or fewer.', max_length=150, unique=True, verbose_name='Email address')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone number')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'swappable': 'AUTH_USER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('street', models.CharField(max_length=50, verbose_name='Street')),
                ('house', models.CharField(max_length=50, verbose_name='House')),
                ('apartment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Apartment')),
                ('user', models.ForeignKey(blank=True, help_text='Optional. Link to the user who uses the specified address.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rtoken', models.UUIDField(default=uuid.UUID('9cfe433c-4587-42be-900e-dd550832a65a'), unique=True, verbose_name='Password reset token')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rtoken', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Password reset token',
                'verbose_name_plural': 'Password reset tokens',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(help_text='Required. 50 characters or fewer.', max_length=50, verbose_name='Model')),
                ('name', models.CharField(help_text='Required. 100 characters or fewer.', max_length=100, unique=True, verbose_name='Name')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autopurchases.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='ProductsParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=50, verbose_name='Value')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products_values', to='autopurchases.parameter', verbose_name='Parameter')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters_values', to='autopurchases.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Products parameter',
                'verbose_name_plural': 'Products parameters',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='parameters',
            field=models.ManyToManyField(related_name='products', through='autopurchases.ProductsParameters', to='autopurchases.parameter', verbose_name='Parameters'),
        ),
        migrations.CreateModel(
            name='ShopsManagers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False, verbose_name='Owner')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shops_roles', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managers_roles', to='autopurchases.shop', verbose_name='Shop')),
            ],
        ),
        migrations.AddField(
            model_name='shop',
            name='managers',
            field=models.ManyToManyField(related_name='shops', through='autopurchases.ShopsManagers', to=settings.AUTH_USER_MODEL, verbose_name='Managers'),
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantity of the product in stock.', verbose_name='Quantity')),
                ('price', models.PositiveBigIntegerField(help_text='Price of the product in minimum monetary units.', verbose_name='Price')),
                ('can_buy', models.BooleanField(default=True, help_text='Check this if the product is available for order. If unchecked, the product will not be displayed on the website.', verbose_name='Available for order')),
                ('product', models.ForeignKey(help_text='Link to the product.', on_delete=django.db.models.deletion.CASCADE, to='autopurchases.product', verbose_name='Product')),
                ('shop', models.ForeignKey(help_text='Link to the shop.', on_delete=django.db.models.deletion.CASCADE, to='autopurchases.shop', verbose_name='Shop')),
            ],
            options={
                'verbose_name': 'Products in stock',
                'verbose_name_plural': 'Products in stock',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='shops',
            field=models.ManyToManyField(related_name='products', through='autopurchases.Stock', to='autopurchases.shop', verbose_name='Shops'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('total_price', models.PositiveBigIntegerField(verbose_name='Total price')),
                ('status', models.CharField(choices=[('created', 'Создан'), ('confirmed', 'Подтвержден'), ('assembled', 'Собран'), ('sent', 'Отправлен'), ('delivered', 'Доставлен'), ('cancelled', 'Отменен')], default='created', max_length=50, verbose_name='Order status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('delivery_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autopurchases.contact', verbose_name='Delivery address')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autopurchases.stock', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('total_price', models.PositiveBigIntegerField(verbose_name='Total price')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autopurchases.stock', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Products in cart',
                'verbose_name_plural': 'Products in cart',
            },
        ),
        migrations.AddConstraint(
            model_name='productsparameters',
            constraint=models.UniqueConstraint(fields=('product', 'parameter', 'value'), name='unique-product-parameter'),
        ),
        migrations.AddConstraint(
            model_name='stock',
            constraint=models.UniqueConstraint(fields=('shop', 'product'), name='unique-shop-product'),
        ),
    ]
